 /*
       PacocaTeam
       Alunos : 
                Daniel(21201910)
                Denys(21200320)
*/

import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

class NDesig {
        String nome;
        boolean vec;
        public NDesig(String n, boolean v) {
                nome = n;
                vec = v;
        }
        public String getNome() {
                return nome;
        }
        public boolean vetor() {
                return vec;
        }
}

class NTipo {
        String tipo;
        boolean vec;
        public NTipo(String t, boolean v) {
                tipo = t;
                vec = v;
        }
        public String getTipo() {
                return tipo;
        }
        public boolean vetor() {
                return vec;
        }
}

COMPILER MicroPortugol

	private Tab ts;
	private Obj ofuncAtual;

	private Code objCode;

	private Struct getTipo(String tipo, boolean vec) { 
		Obj o = ts.buscar(tipo);
		Struct st = o.tipo;
		if (vec) st = new Struct(Struct.Vetor, o.tipo);
		return st;	
	}

	public void erro(String msg) {
		errors.SemErr(t.line, t.col, msg);
	}

CHARACTERS
	semAspas 	= ANY - '"'.
	letra 		= "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_".
	digito 		= "0123456789".

TOKENS
	id 		    = letra {letra | digito}.
	strConst 	= '"' {semAspas} '"'.
	num 		= ['-'] digito { digito } .

PRAGMAS
	option = "$d".	(. ts.dump(); .)

COMMENTS FROM "/*" TO "*/" NESTED

IGNORE '\r' + '\n' + '\t'

PRODUCTIONS


/* 
 * O escopo universo foi modelado de forma que contenha um conjunto de variaveis globais,
 * constantes ou procedimentos e apenas UM bloco principal, seguindo as restricoes
 * definidas pela linguagem Algol 68
*/

MicroPortugol                           (. ofuncAtual = null; 
                                           ts = new Tab(this);
                                           ts.abrirEscopo("Global");
                                        .) 


= "algoritmo" id 
        {declaracao_var 
        | declaracao_const 
        | bloco_procedimento
        } 
        bloco_principal                (. ts.fecharEscopo(); .)
        .

/* 
 * "declaracao_var" não termina com ; pois pode pertencer tanto a declaracao global quanto
 * a regra "instrucoes" e para efeitos de simplificacao tal regra foi definada terminando
 * com ";". Isso foi necessario para evitar apenas reconhecer ";;" na regra instrucoes.  
*/


// Bloco de declaracao de variaveis e constantes

declaracao_var                          (.  
                                           ArrayList<String> nomeVariaveis 
                                                = new ArrayList();
                                           NTipo ntipo;
                                        .)

 = 
"variavel" 
id                                      (. nomeVariaveis.add(t.val); .) 
{","
 id                                     (. nomeVariaveis.add(t.val); .)
} 
":" 
tipo<out ntipo>                         (. Struct st = getTipo(ntipo.getTipo(),
                                                ntipo.vetor());

                                           if (st == ts.semTipo)
                                                erro("A variável não pode ter tipo desconhecido");
                                                 
                                           Iterator iter = nomeVariaveis.iterator();
                                        
                                           while (iter.hasNext()) {
                                                ts.inserir(Obj.Var, iter.next().toString(), st);
                                           }
                                           
                                        .)
                                                 
";".


tipo<out NTipo ntipo>                   (. boolean vet = false; 
                                           String tip;
                                        .)
=                                       
"inteiro"                               (. tip = t.val; .)
["[" "]"                                (. vet = true; .)
]                                       (. ntipo = new NTipo(tip, vet); .)
.      

declaracao_const                        (. 
                                           Obj obj;
                                        .)   
= "constante" 
        id                              (. obj = ts.buscar("inteiro");
                                           obj = ts.inserir(Obj.Const, t.val, obj.tipo); 
                                        .) 
        "=" 
        num                             (. obj.val = Integer.parseInt(t.val); .)
        ";"
        .

//O designador indica uma variavel ou um vetor
designador = id ["[" expressao "]"] .

// Funcoes e parametros
parametros = (. NTipo ntipo; .) 
id ":" tipo<out ntipo> {"," id ":" tipo<out ntipo>}.
parametros_passados = "(" [expressao {"," expressao}] ")".

bloco_procedimento                      (. NTipo ntipo;.)
= "procedimento" id "(" [parametros] ")" [":" tipo<out ntipo>] "inicio"
 instrucoes "fim".

retorno = "retorne" [expressao] ";". 


bloco_principal                         (. ofuncAtual = ts.inserir(Obj.Func,
                                           "main", getTipo("void", false));
                                           ts.abrirEscopo("Func main");
                                        .)

= "inicio" 
  instrucoes 
  "fim"                                 (. ofuncAtual.locais = ts.escopoAtual.locais;
                                           ts.fecharEscopo();
                                        .)
  .

/* 
 * Existe um grande problema em relacao ao reconhecimento de designadores e
 * chamada de funcoes (ambas as regras comecam com o token "id". A maneira a qual a
 * ambiguidade foi solucionada consiste na seguinte producao utilizada na regra "comando"
 * : designador (assinalamento | parametros_passados) 
 * Incoerencias como "funcao[]();" serao tratados semanticamente
*/
comando = (declaracao_var | repeticao_def | condicional_def | io_def | 
designador (assinalamento | parametros_passados) ";" | retorno).


// Definicao de instrucoes e suas respectivas estruturas

instrucoes = {comando}.


assinalamento = "=" expressao .
aloc_vetor =  "novo" "inteiro" ("["
expressao "]" | "{" num {"," num} "}").

repeticao_def = para_def | enquanto_def | repita_def.
para_def = "para" id "=" expressao "ate" expressao ["passo" expressao] "faca" instrucoes "fimpara"
[";"].

enquanto_def = "enquanto" condicao "faca" instrucoes "fimenquanto" [";"].
operador_relacional = "!=" | ">" | "<" | ">=" | "<=" | "==".

repita_def = "repita" instrucoes "ate" condicao ";".

// Comandos condicionais

condicional_def = se_def | caso_def.

se_def = "se" condicao "entao" instrucoes ["senao" instrucoes] "fimse" [";"]. 
caso_def = "caso" designador caso_seja_def {caso_seja_def} "outrocaso" ":" instrucoes "fimcaso".
caso_seja_def = "seja" expressao "faca" instrucoes.
condicao = expressao operador_relacional expressao.


// Funcoes de entrada e saida
io_def = escreva_def | leia_def.

// -- leia(n); -> se n for invalido, entao retorna 0.
leia_def = "leia" "(" designador ")" ";".
escreva_def = "escreva" "(" (strConst | designador [parametros_passados]) 
{"," (strConst | designador [parametros_passados])} ")" ";".

// Tratamento de expressoes

expressao = termo {("+" | "-") termo}.
termo = fator {("*" | "/" | "%") fator}.
fator = num | designador [parametros_passados] | "(" expressao ")" | aloc_vetor.

END MicroPortugol.

